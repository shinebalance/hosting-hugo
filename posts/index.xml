<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on notes</title>
    <link>https://shinebalance.github.io/hosting-hugo/posts/</link>
    <description>Recent content in Posts on notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Sat, 13 Mar 2021 13:08:43 +0900</lastBuildDate>
    
        <atom:link href="https://shinebalance.github.io/hosting-hugo/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust Rocket雑感(Web APIサンプル)</title>
      <link>https://shinebalance.github.io/hosting-hugo/posts/rustmemo20210313/</link>
      <pubDate>Sat, 13 Mar 2021 13:08:43 +0900</pubDate>
      
      <guid>https://shinebalance.github.io/hosting-hugo/posts/rustmemo20210313/</guid>
      <description>&lt;h1 id=&#34;rocketお勉強メモ&#34;&gt;Rocketお勉強メモ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;雑にやったことをメモっていく。雑感(雑な所感)の記録を目的とするため、読めば分かる系の細かな手順は省く。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やること&#34;&gt;やること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Qiita記事をもとにAPIの実装をやって(写経して)みる。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/yukinarit/items/c5128e67d168b4f39983&#34;&gt;Rust RocketでのWebAPIサーバーの書き方を解説してみる&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;とにかく自分の求めてるユースケースに近いサンプルコードを動かして、Rustの言語仕様をちょっとでも理解する。教科書もそのうち読むけど、読むだけで満足しちゃわないために&lt;/li&gt;
&lt;li&gt;あと、簡易サーバサイドとしてRocketが使えるかどうかの見極め。どうも&lt;code&gt;Actix-web&lt;/code&gt;というのも有るらしく、正直そっちも気になってる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-api実装&#34;&gt;Web API実装&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;参照リンク
&lt;a href=&#34;https://qiita.com/yukinarit/items/c5128e67d168b4f39983&#34;&gt;Rust RocketでのWebAPIサーバーの書き方を解説してみる&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;お作法の復習&#34;&gt;お作法の復習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;まずは&lt;code&gt;cargo new [hogehoge]&lt;/code&gt;、全てはそこから&lt;/li&gt;
&lt;li&gt;写経の順序としては&lt;code&gt;Cargo.toml&lt;/code&gt;と&lt;code&gt;main.rs&lt;/code&gt;、そこから&lt;code&gt;routers.rs&lt;/code&gt;と&lt;code&gt;modeles.rs&lt;/code&gt;の順になるらしい。&lt;/li&gt;
&lt;li&gt;ついでにVSCodeのRustのExtensionも入れた&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cargotoml&#34;&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serde&lt;/code&gt;ってなに？どうもシリアライズ/デシリアライズ担当らしい。&lt;/li&gt;
&lt;li&gt;Djangoのシリアライザと役割は似たようなもんなんだろうか&lt;/li&gt;
&lt;li&gt;一回この時点で&lt;code&gt;cargo build&lt;/code&gt;してみる、ガンガンcrateが入っていく(インテリセンスが入るかもという期待)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mainrs&#34;&gt;&lt;code&gt;main.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mod&lt;/code&gt;と&lt;code&gt;use&lt;/code&gt;の違いはまだよくわからない&lt;/li&gt;
&lt;li&gt;それ以外は概ねなんとなくわかる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modelsrs&#34;&gt;&lt;code&gt;models.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DjangoのModelと一緒に見える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;derive&lt;/code&gt;は継承らしいので、ここで書いたToDo構造体はシリアライザー(Serde？)を通るってことかな&lt;/li&gt;
&lt;li&gt;だとすると結構お気軽にシリアライザ使えることになるのでありがたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;routesrs&#34;&gt;&lt;code&gt;routes.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;実際に割り当てたルーティング先の処理を別に書いてる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# []&lt;/code&gt;ってRocketの作法なのかな、それともPythonのデコレータみたいなもの？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Json&amp;lt;Vec&amp;lt;ToDo&amp;gt;&amp;gt;&lt;/code&gt;えっなにこれ……？？？&lt;/li&gt;
&lt;li&gt;おそらくPythonで言うと&lt;code&gt;json(vec(ToDo))&lt;/code&gt;のことと思われる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cargo-run&#34;&gt;&lt;code&gt;cargo run&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;動いた！&lt;/li&gt;
&lt;li&gt;今回のサンプル、POSTもらってもファイルの書き込みとかはせず、ただシリアライズしたJSONを返してるだけなのね&lt;/li&gt;
&lt;li&gt;とはいえちゃんとjsonにできているので、このままMongoDBとかに書き込んだりとかはできそう&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;疑問点&#34;&gt;疑問点&lt;/h2&gt;
&lt;h3 id=&#34;mainrs-1&#34;&gt;&lt;code&gt;main.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#![feature(proc_macro_hygiene)]``#![feature(decl_macro)]/&lt;/code&gt;は毎回有るきがするけど、何をしている？
&lt;ul&gt;
&lt;li&gt;→試しにこの2つをコメントアウトして実行した所、&lt;code&gt;#[]&lt;/code&gt;を使っている部分が全てコケた。つまり、この文言によって&lt;code&gt;#[]&lt;/code&gt;の記法を使えるようになるっぽい。&lt;/li&gt;
&lt;li&gt;もう少し調べてみた。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;proc_macro_hygiene&lt;/code&gt;はprocedural macros&lt;code&gt;decl_macro&lt;/code&gt;はdeclarative macro、宣言的マクロの略らしい。&lt;/li&gt;
&lt;li&gt;この辺はマクロについてをちゃんと読んだほうが良さそう。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doc.rust-lang.org/book/ch19-06-macros.html&#34;&gt;Macros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;いやまて、マクロって関数と違うの？という素朴な疑問
&lt;ul&gt;
&lt;li&gt;解説あった、めっちゃおもろい、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/optim/rust-all-kinds-of-macro&#34;&gt;https://speakerdeck.com/optim/rust-all-kinds-of-macro&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;modelrs&#34;&gt;&lt;code&gt;model.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#[derive(Debug, Serialize, Deserialize)]&lt;/code&gt;はどうやらインターフェイスとしてこの3つを通るという意味っぽい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;routesrs-1&#34;&gt;&lt;code&gt;routes.rs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vec&lt;/code&gt;はなんとなくnumpyのndarrayっぽい気がする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;# [get(&amp;quot;/todos&amp;quot;)]&lt;/code&gt;がよくわからないが、前述のスライドを参照すると「属性マクロ」になるようだ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;into()&lt;/code&gt;は型変換？らしい…&lt;a href=&#34;https://doc.rust-lang.org/rust-by-example/conversion/from_into.html#into&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;雑感雑な感想&#34;&gt;雑感(雑な感想)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;うーむ、たった十数行だけど知らないことばかりである。&lt;/li&gt;
&lt;li&gt;しかし、Python(と、JavaとC#を一瞬)やっただけの人間としてはシンプルに面白く感じるところが多いので、引き続き折を見て触れていこうと思う。&lt;/li&gt;
&lt;li&gt;ただ1つ気になるのだが、Rustって結構不親切な略称が多い気がする…pub,fn,Vec&amp;hellip;(ある意味古風な言語らしいが)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;eof&#34;&gt;EOF&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>memo:RustのHello worldメモ</title>
      <link>https://shinebalance.github.io/hosting-hugo/posts/rustmemo20210307/</link>
      <pubDate>Sun, 07 Mar 2021 19:39:00 +0900</pubDate>
      
      <guid>https://shinebalance.github.io/hosting-hugo/posts/rustmemo20210307/</guid>
      <description>&lt;h1 id=&#34;rust爆速hello-world雑メモ&#34;&gt;Rust爆速Hello world/雑メモ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;雑にやったことをメモっていく。雑感(雑な所感)の記録を目的とするため、読めば分かる系の細かな手順は省く。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やること&#34;&gt;やること&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ハロワ&lt;/li&gt;
&lt;li&gt;Rocketを動かす&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いいかげんC++レイヤの言語を覚えたい、でも今っぽいのが良い&lt;/li&gt;
&lt;li&gt;とりあえず動かしてみようの巻&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;参照リンク
&lt;a href=&#34;https://www.rust-lang.org/ja/learn/get-started&#34;&gt;https://www.rust-lang.org/ja/learn/get-started&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;飽きたらお気軽に売買したいので、&lt;code&gt;brew install rust&lt;/code&gt;で導入。1.5.0が入る。&lt;/li&gt;
&lt;li&gt;コマンドは&lt;code&gt;rustc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;コマンドのサイクルは&lt;code&gt;cargo new [hoge]&lt;/code&gt;(プロジェクト作成)&amp;raquo;&lt;code&gt;cargo build&lt;/code&gt;(ビルド)&amp;raquo;&lt;code&gt;cargo run&lt;/code&gt;(実行)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo build&lt;/code&gt;抜かしてrunしてみたけど、toml参照してInstallしてくれるのね&lt;/li&gt;
&lt;li&gt;カニにハロワ言わせる(&lt;code&gt;ferris_says&lt;/code&gt;)だけの時点で既に結構楽しい&lt;/li&gt;
&lt;li&gt;そしてferris-says、思ったより&lt;a href=&#34;https://github.com/mgattozzi/ferris-says&#34;&gt;ソースコード長いやんけ…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rocket&#34;&gt;Rocket&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;公式リンク
&lt;a href=&#34;https://rocket.rs/&#34;&gt;https://rocket.rs/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;とりあえず身近なテーマでRustを使ってみたいので、あわよくばバックエンドに採用できそうなRocketを動かしてみる&lt;/li&gt;
&lt;li&gt;さっきいれたRustだとなんか動かないもの出てきたのでrustupごと入れ直し
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.soudegesu.com/post/rust/rust-with-rustup/&#34;&gt;https://www.soudegesu.com/post/rust/rust-with-rustup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;環境変数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;export CARGO_HOME=&amp;quot;$HOME/.cargo&amp;quot; &amp;gt;&amp;gt; ~/.zshrc
export PATH=&amp;quot;$CARGO_HOME/bin:$PATH&amp;quot; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;nightlyにしたら動くようになった。&lt;/li&gt;
&lt;li&gt;Flaskは触ったこと有るのだけど、ちょっと似てる。main.rsだけで結構書けるらしいのでもう少し遊んでみようと思う。&lt;/li&gt;
&lt;li&gt;なによりPython以外の言語仕様を知る題材としてはけっこう面白い気がした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;eof&#34;&gt;EOF&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>memo:HUGO雑感</title>
      <link>https://shinebalance.github.io/hosting-hugo/posts/test-post/</link>
      <pubDate>Sun, 07 Mar 2021 11:51:54 +0900</pubDate>
      
      <guid>https://shinebalance.github.io/hosting-hugo/posts/test-post/</guid>
      <description>&lt;h1 id=&#34;hugo雑感雑な感想&#34;&gt;HUGO雑感(雑な感想)&lt;/h1&gt;
&lt;p&gt;(´・ω・｀)やぁ。&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;デザインテンプレートを拝借しながら静的サイトを簡易に作る方法を探して、HUGOを2時間ほど動かしてみた&lt;/li&gt;
&lt;li&gt;初〜中級エンジニアが使うには良いツールだと思う。が、誰しもにフィットするものでも無い気がした。&lt;/li&gt;
&lt;li&gt;今後も使うかは正直わからない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pros&#34;&gt;Pros&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;シャレオツなTheme&lt;/a&gt;が結構用意されてる。自分はデザインセンス無いので、こういうの選べるの結構楽しい&lt;/li&gt;
&lt;li&gt;Markdownベースで記述できる。自分のように普段のメモをMarkdownで取る習慣の有る人間にはバッチリ。運用に慣れれば、手元にMarkdownメモを残す→公開のサイクルをクルクル回せそう&lt;/li&gt;
&lt;li&gt;GoLangベースだが、別にGoの知識いらない。&lt;code&gt;config.toml&lt;/code&gt;の設定と、あとはメタ構文的なものを覚えたら終わり。逆に言うとGoに興味を持ってるからHUGOを使う、というものでもない&lt;/li&gt;
&lt;li&gt;マネージドサービスと比較すると、静的サイトの配信方法など自分で考えるポイントが有り、勉強になる。当たり前の人にとっては当たり前の知識であるとは思うが。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cons&#34;&gt;Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;別にはてなblogとかMediumでいいんじゃね？と思ったら負け。&lt;/li&gt;
&lt;li&gt;考えようによっては中途半端。自前サーバWordpress〜はてブロの真ん中くらいの労力を進んで取りたいかどうか。&lt;/li&gt;
&lt;li&gt;以下は自分のスキル不足に端緒してる気もするが、メモ
&lt;ul&gt;
&lt;li&gt;うまいことホットリロードが効かない&lt;/li&gt;
&lt;li&gt;今回使ったbentoは&lt;code&gt;hugo server&lt;/code&gt;じゃなくて&lt;code&gt;npm run dev&lt;/code&gt;で開発サーバ見てくれっって書いてあるけど、なんでだろう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;eof&#34;&gt;EOF&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
